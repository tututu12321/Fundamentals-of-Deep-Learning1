import numpy as np

# 1. 平均二乗誤差 (Mean Squared Error, MSE)
def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

# 2. 平均絶対誤差 (Mean Absolute Error, MAE)
def mean_absolute_error(y_true, y_pred):
    return np.mean(np.abs(y_true - y_pred))

# 3. ハブ損失 (Huber Loss)
def huber_loss(y_true, y_pred, delta=1.0):
    error = y_true - y_pred
    is_small_error = np.abs(error) <= delta
    squared_loss = 0.5 * (error ** 2)
    linear_loss = delta * (np.abs(error) - 0.5 * delta)
    return np.where(is_small_error, squared_loss, linear_loss).mean()

# 4. バイナリクロスエントロピー (Binary Cross-Entropy)
def binary_cross_entropy(y_true, y_pred):
    # np.clipを使用して予測が0または1にならないようにする
    y_pred = np.clip(y_pred, 1e-7, 1 - 1e-7)
    return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))

# 5. カテゴリカルクロスエントロピー (Categorical Cross-Entropy)
def categorical_cross_entropy(y_true, y_pred):
    y_pred = np.clip(y_pred, 1e-7, 1 - 1e-7)
    return -np.sum(y_true * np.log(y_pred)) / y_true.shape[0]

# テストデータの例
y_true_regression = np.array([1.0, 2.0, 3.0])
y_pred_regression = np.array([0.9, 2.1, 3.0])

y_true_binary = np.array([1, 0, 1, 1])
y_pred_binary = np.array([0.9, 0.2, 0.8, 0.7])

y_true_categorical = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
y_pred_categorical = np.array([[0.7, 0.2, 0.1], [0.1, 0.8, 0.1], [0.2, 0.2, 0.6]])

# 平均二乗誤差の計算
mse = mean_squared_error(y_true_regression, y_pred_regression)
print(f"MSE: {mse:.4f}")

# 平均絶対誤差の計算
mae = mean_absolute_error(y_true_regression, y_pred_regression)
print(f"MAE: {mae:.4f}")

# ハブ損失の計算
huber = huber_loss(y_true_regression, y_pred_regression, delta=1.0)
print(f"Huber Loss: {huber:.4f}")

# バイナリクロスエントロピーの計算
bce = binary_cross_entropy(y_true_binary, y_pred_binary)
print(f"Binary Cross-Entropy: {bce:.4f}")

# カテゴリカルクロスエントロピーの計算
cce = categorical_cross_entropy(y_true_categorical, y_pred_categorical)
print(f"Categorical Cross-Entropy: {cce:.4f}")
