import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F

# CNNのモデル定義
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        # 畳み込み層: 入力チャネル 1、出力チャネル 16、フィルターサイズ 3x3
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=16, kernel_size=3, stride=1, padding=1)
        # プーリング層: 2x2
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        # 全結合層1: (16*14*14) -> 128
        self.fc1 = nn.Linear(16 * 14 * 14, 128)
        # 全結合層2: 128 -> 10 (分類クラスが10の場合)
        self.fc2 = nn.Linear(128, 10)
    
    def forward(self, x):
        # 畳み込み + ReLU + プーリング層
        x = self.pool(F.relu(self.conv1(x)))
        # データをフラット化
        x = x.view(-1, 16 * 14 * 14)
        # 全結合層 + ReLU
        x = F.relu(self.fc1(x))
        # 全結合層 + ソフトマックス (出力クラスの確率分布)
        x = F.softmax(self.fc2(x), dim=1)
        return x

# モデルの初期化
model = SimpleCNN()

# テスト入力の生成（バッチサイズ: 1、チャネル: 1、画像サイズ: 28x28）
test_input = torch.randn(1, 1, 28, 28)

# 順伝播
output = model(test_input)

# 結果表示
print("Output probabilities:", output)
