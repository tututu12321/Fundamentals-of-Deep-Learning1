import numpy as np

# ステップ関数（活性化関数）
def step_function(x):
    return 1 if x >= 0 else 0

# 2入力のパーセプトロン
def perceptron(x1, x2, weights, bias):
    weighted_sum = weights[0] * x1 + weights[1] * x2 + bias
    return step_function(weighted_sum)

# 各論理ゲートの重みとバイアスの設定
def and_perceptron(x1, x2):
    return perceptron(x1, x2, weights=[1, 1], bias=-1.5)  # ANDゲート

def nand_perceptron(x1, x2):
    return perceptron(x1, x2, weights=[-1, -1], bias=1.5)  # NANDゲート

def or_perceptron(x1, x2):
    return perceptron(x1, x2, weights=[1, 1], bias=-0.5)  # ORゲート

# テストデータ
inputs = [
    (0, 0),  # x1=0, x2=0
    (0, 1),  # x1=0, x2=1
    (1, 0),  # x1=1, x2=0
    (1, 1)   # x1=1, x2=1
]

# 各ゲートの出力を計算して表示
print("AND回路の出力:")
for x1, x2 in inputs:
    output = and_perceptron(x1, x2)
    print(f"入力: ({x1}, {x2}) -> 出力: {output}")

print("\nNAND回路の出力:")
for x1, x2 in inputs:
    output = nand_perceptron(x1, x2)
    print(f"入力: ({x1}, {x2}) -> 出力: {output}")

print("\nOR回路の出力:")
for x1, x2 in inputs:
    output = or_perceptron(x1, x2)
    print(f"入力: ({x1}, {x2}) -> 出力: {output}")
