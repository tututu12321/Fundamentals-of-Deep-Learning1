import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms

# MNISTデータセットのロードと前処理
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

# 訓練データセットとテストデータセットの取得
train_dataset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_dataset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)

# データローダーの作成
train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=64, shuffle=False)

# ニューラルネットワークの定義（単層のパーセプトロンモデル）
class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.fc1 = nn.Linear(28 * 28, 128)  # 入力層（28x28ピクセル） -> 隠れ層（128ユニット）
        self.fc2 = nn.Linear(128, 10)       # 隠れ層 -> 出力層（10クラス分類）

    def forward(self, x):
        x = x.view(-1, 28 * 28)  # 28x28の画像を1次元に変換
        x = torch.relu(self.fc1(x))  # 隠れ層にReLU活性化関数を適用
        x = self.fc2(x)              # 出力層
        return x

# モデルのインスタンス化と設定
model = SimpleNN()
criterion = nn.CrossEntropyLoss()  # 損失関数: クロスエントロピー
optimizer = optim.SGD(model.parameters(), lr=0.01)  # SGDオプティマイザ

# 訓練ループ
num_epochs = 5

for epoch in range(num_epochs):
    running_loss = 0.0
    for images, labels in train_loader:
        # 順伝搬
        outputs = model(images)
        loss = criterion(outputs, labels)

        # 勾配をリセット
        optimizer.zero_grad()

        # 逆伝搬
        loss.backward()

        # パラメータの更新
        optimizer.step()

        running_loss += loss.item()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss / len(train_loader):.4f}')

# テストループ
correct = 0
total = 0
model.eval()  # 推論モードに設定
with torch.no_grad():
    for images, labels in test_loader:
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f'Test Accuracy: {100 * correct / total:.2f}%')
